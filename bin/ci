#!/usr/bin/env bash

set -eo pipefail

# usage: display usage with the appropriate exit code
#
# usage: usage [EXIT_CODE]
#
#   EXIT_CODE: program exit code (default: 0)
function usage(){

    declare -i exit_code="${1:-0}"

    echo "Usage: bin/ci COMMAND

Available commands:

  activate_path    display CIRCLE_TAG (or CIRCLE_JOB) release activate script path
  checkpoint       skip release job if changes are not targeting the current release
  get_changes      get a list of changed files in the current branch compared to master
  test             test the application server response
"

    # shellcheck disable=SC2086
    exit ${exit_code}
}

# Get active release activation path given the CIRCLE_TAG or CIRCLE_JOB
# environment variable. If both are defined the CIRCLE_TAG variable will
# prevail.
function activate_path(){

  declare reference
  declare release

  reference=${CIRCLE_TAG:-${CIRCLE_JOB}}
  if [[ -z ${reference} ]]; then
    (>&2 echo "CIRCLE_TAG or CIRCLE_JOB environment variable should be defined!")
    exit 20
  fi

  # We need to convert the reference (_e.g._ something like hawthorn.1-1.0.3 or dogwood.3-fun)
  # to a flavored release path (e.g. something like hawthorn/1/bare or dogwood/3/fun for the
  # later examples). In the following, we have a three-steps pipeline
  # to do so: i. get the release name, number and optionally a flavor from the
  # reference, ii. in case of empty release number and/or flavor, our sed
  # substitution will generate duplicated slashes that should be fixed, and
  # iii.  the default flavor (empty third group from our regular expression)
  # should be named "bare".
  release=$(\
    echo "${reference}" | \
    sed -E 's|^([a-z]*)\.?([0-9]*)-?([a-z]*)?(-[0-9.]+)?$|\1/\2/\3|g' | \
    sed -E 's|//|/|g' | \
    sed -E 's|/$|/bare|g'
  )

  echo "releases/${release}/activate"
}

# Skip release job if changes are not targeting the current release
function checkpoint(){

  changes=$(get_changes)

  if echo "${changes}" | grep -v "releases/" > /dev/null ; then
    (>&2 echo "Current work scope is global, all releases should build.")
    exit 0
  fi

  release_path=$(activate_path | sed -E 's|/activate$||')

  if ! echo "${changes}" | grep "${release_path}" > /dev/null ; then
    (>&2 echo "Skipping release (out of scope).")
    circleci-agent step halt
  fi
}

# Get a list of changed files in the current branch
function get_changes() {

    git whatchanged --name-only --pretty="" "origin/master..HEAD" | sort -u
}

# ---- Main ----

# Check if this script is being sourced or executed. Explanation: Bash allows
# return statements only from functions and, in a script's top-level scope, only
# if the script is sourced.
(return 2> /dev/null) && sourced=1 || sourced=0

if [[ ${sourced} == 0 ]]; then

    action="${1:-usage}"

    # Remove current action from arguments array
    if [[ -n "${1}" ]]; then
        shift
    fi

    "$action" "$@"
fi

